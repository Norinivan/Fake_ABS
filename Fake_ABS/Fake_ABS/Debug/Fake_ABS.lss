
Fake_ABS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000274  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002a3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fa  00000000  00000000  000002e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003d5  00000000  00000000  000009db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000100  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000131e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  000001d6  000001d6  0000026a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 00000054  00000142  00000142  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.start_blink 00000032  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    000000dc  00000066  00000066  000000fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.restart  00000001  00800062  00800062  00000274  2**0
                  ALLOC
 18 .bss.counter  00000002  00800060  00800060  00000274  2**0
                  ALLOC
 19 .bss.status_blink 00000001  00800063  00800063  00000274  2**0
                  ALLOC
 20 .text.__dummy_fini 00000002  000001d8  000001d8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  000001da  000001da  0000026e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  000001dc  000001dc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    0000000e  000001c8  000001c8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000002  000001de  000001de  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	e9 c0       	rjmp	.+466    	; 0x1d6 <__bad_interrupt>
   4:	9e c0       	rjmp	.+316    	; 0x142 <__vector_2>
   6:	e7 c0       	rjmp	.+462    	; 0x1d6 <__bad_interrupt>
   8:	e6 c0       	rjmp	.+460    	; 0x1d6 <__bad_interrupt>
   a:	e5 c0       	rjmp	.+458    	; 0x1d6 <__bad_interrupt>
   c:	e4 c0       	rjmp	.+456    	; 0x1d6 <__bad_interrupt>
   e:	e3 c0       	rjmp	.+454    	; 0x1d6 <__bad_interrupt>
  10:	e2 c0       	rjmp	.+452    	; 0x1d6 <__bad_interrupt>
  12:	e1 c0       	rjmp	.+450    	; 0x1d6 <__bad_interrupt>

00000014 <.dinit>:
  14:	00 60       	ori	r16, 0x00	; 0
  16:	00 64       	ori	r16, 0x40	; 64
  18:	80 00       	.word	0x0080	; ????

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e9       	ldi	r28, 0x9F	; 159
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	e4 e1       	ldi	r30, 0x14	; 20
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	40 e0       	ldi	r20, 0x00	; 0
  28:	17 c0       	rjmp	.+46     	; 0x58 <__do_clear_bss+0x8>
  2a:	b5 91       	lpm	r27, Z+
  2c:	a5 91       	lpm	r26, Z+
  2e:	35 91       	lpm	r19, Z+
  30:	25 91       	lpm	r18, Z+
  32:	05 91       	lpm	r16, Z+
  34:	07 fd       	sbrc	r16, 7
  36:	0c c0       	rjmp	.+24     	; 0x50 <__do_clear_bss>
  38:	95 91       	lpm	r25, Z+
  3a:	85 91       	lpm	r24, Z+
  3c:	ef 01       	movw	r28, r30
  3e:	f9 2f       	mov	r31, r25
  40:	e8 2f       	mov	r30, r24
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a2 17       	cp	r26, r18
  48:	b3 07       	cpc	r27, r19
  4a:	d9 f7       	brne	.-10     	; 0x42 <__DATA_REGION_LENGTH__+0x2>
  4c:	fe 01       	movw	r30, r28
  4e:	04 c0       	rjmp	.+8      	; 0x58 <__do_clear_bss+0x8>

00000050 <__do_clear_bss>:
  50:	1d 92       	st	X+, r1
  52:	a2 17       	cp	r26, r18
  54:	b3 07       	cpc	r27, r19
  56:	e1 f7       	brne	.-8      	; 0x50 <__do_clear_bss>
  58:	e9 31       	cpi	r30, 0x19	; 25
  5a:	f4 07       	cpc	r31, r20
  5c:	31 f7       	brne	.-52     	; 0x2a <__do_copy_data+0x8>
  5e:	03 d0       	rcall	.+6      	; 0x66 <_etext>
  60:	b3 c0       	rjmp	.+358    	; 0x1c8 <exit>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>

Disassembly of section .text:

000001d6 <__bad_interrupt>:
 1d6:	14 cf       	rjmp	.-472    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

00000142 <__vector_2>:
unsigned char	restart = 0;	//Флаг перезагрузки по выключению предохранителя

void start_blink(void);

ISR(PCINT0_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
	if (!(PINB & (1<<BTNPIN)))	//Если нажата кнопка диагностики
 14e:	b1 99       	sbic	0x16, 1	; 22
 150:	0f c0       	rjmp	.+30     	; 0x170 <__vector_2+0x2e>
	{
		status_blink = 1;		//Выставляю флаг диагностики
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <status_blink>
		counter = 0;			//Сбрасываю счётчик времени
 158:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTB|=(1<<TESTPIN)|(1<<OUTPIN);	//Зажигаю светодиод на панели
 160:	88 b3       	in	r24, 0x18	; 24
 162:	89 60       	ori	r24, 0x09	; 9
 164:	88 bb       	out	0x18, r24	; 24
		while(!(PINB & (1<<BTNPIN)));		//Жду, пока нажата кнопка
 166:	b1 9b       	sbis	0x16, 1	; 22
 168:	fe cf       	rjmp	.-4      	; 0x166 <__vector_2+0x24>
		PORTB&=~((1<<OUTPIN)|(1<<TESTPIN));	//Выключаю светодиод
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	86 7f       	andi	r24, 0xF6	; 246
 16e:	88 bb       	out	0x18, r24	; 24
	}
	if ((PINB & (1<<FUSEPIN)))				//Если предохранитель выдернули
 170:	b4 9b       	sbis	0x16, 4	; 22
 172:	0b c0       	rjmp	.+22     	; 0x18a <__vector_2+0x48>
	{
		PORTB|=(1<<TESTPIN)|(1<<OUTPIN);	//Зажигаю светодиод
 174:	88 b3       	in	r24, 0x18	; 24
 176:	89 60       	ori	r24, 0x09	; 9
 178:	88 bb       	out	0x18, r24	; 24
		while ((PINB & (1<<FUSEPIN)));		//жду, пока не вставят предохранитель
 17a:	b4 99       	sbic	0x16, 4	; 22
 17c:	fe cf       	rjmp	.-4      	; 0x17a <__vector_2+0x38>
		PORTB&=~((1<<OUTPIN)|(1<<TESTPIN));	//Выключаю светодиод
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	86 7f       	andi	r24, 0xF6	; 246
 182:	88 bb       	out	0x18, r24	; 24
		restart = 1;						//Поднимаю флаг перезагрузки
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <restart>
	}
		
}
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

Disassembly of section .text.start_blink:

00000196 <start_blink>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	2f eb       	ldi	r18, 0xBF	; 191
 198:	84 ed       	ldi	r24, 0xD4	; 212
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <start_blink+0x6>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <start_blink+0x10>
 1a6:	00 00       	nop
}

void start_blink(void)
{
	_delay_ms(500);
	PORTB|=(1<<OUTPIN);
 1a8:	88 b3       	in	r24, 0x18	; 24
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	2f e3       	ldi	r18, 0x3F	; 63
 1b0:	8e e7       	ldi	r24, 0x7E	; 126
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <start_blink+0x1e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <start_blink+0x28>
 1be:	00 00       	nop
	_delay_ms(1500);
	PORTB&=~(1<<OUTPIN);
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret

Disassembly of section .text.main:

00000066 <main>:

int main(void)
{
	{
		
	DDRB|=(1<<OUTPIN)|(1<<TESTPIN);
  66:	87 b3       	in	r24, 0x17	; 23
  68:	89 60       	ori	r24, 0x09	; 9
  6a:	87 bb       	out	0x17, r24	; 23
	PORTB |=(1<<FUSEPIN);
  6c:	88 b3       	in	r24, 0x18	; 24
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	88 bb       	out	0x18, r24	; 24
	PCMSK |= (1 << BTNPIN) | (1 << FUSEPIN);
  72:	85 b3       	in	r24, 0x15	; 21
  74:	82 61       	ori	r24, 0x12	; 18
  76:	85 bb       	out	0x15, r24	; 21
	GIMSK |= (1 << PCIE);
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	8b bf       	out	0x3b, r24	; 59
	sei();
  7e:	78 94       	sei
	
	if ((PINB & (1<<FUSEPIN)))	
  80:	b4 9b       	sbis	0x16, 4	; 22
  82:	08 c0       	rjmp	.+16     	; 0x94 <main+0x2e>
	{
		PORTB|=(1<<TESTPIN)|(1<<OUTPIN);	//Зажигаю светодиод
  84:	88 b3       	in	r24, 0x18	; 24
  86:	89 60       	ori	r24, 0x09	; 9
  88:	88 bb       	out	0x18, r24	; 24
		while ((PINB & (1<<FUSEPIN)));		//жду, пока не вставят предохранитель
  8a:	b4 99       	sbic	0x16, 4	; 22
  8c:	fe cf       	rjmp	.-4      	; 0x8a <main+0x24>
		PORTB&=~((1<<OUTPIN)|(1<<TESTPIN));
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	86 7f       	andi	r24, 0xF6	; 246
  92:	88 bb       	out	0x18, r24	; 24
	}
	start_blink();
  94:	80 d0       	rcall	.+256    	; 0x196 <start_blink>
	
	}
    while(1)
    {
        if (status_blink == 1)
  96:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <status_blink>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <__stack+0x1>
  9e:	42 c0       	rjmp	.+132    	; 0x124 <__stack+0x85>
  a0:	87 eb       	ldi	r24, 0xB7	; 183
  a2:	9b e0       	ldi	r25, 0x0B	; 11
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__stack+0x5>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__stack+0xb>
  aa:	00 00       	nop
        {
			_delay_ms(10);
			counter++;
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if (counter == 150 || counter == 350 || counter == 850 || counter == 1050)
  be:	86 39       	cpi	r24, 0x96	; 150
  c0:	91 05       	cpc	r25, r1
  c2:	59 f0       	breq	.+22     	; 0xda <__stack+0x3b>
  c4:	8e 35       	cpi	r24, 0x5E	; 94
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	92 07       	cpc	r25, r18
  ca:	39 f0       	breq	.+14     	; 0xda <__stack+0x3b>
  cc:	82 35       	cpi	r24, 0x52	; 82
  ce:	23 e0       	ldi	r18, 0x03	; 3
  d0:	92 07       	cpc	r25, r18
  d2:	19 f0       	breq	.+6      	; 0xda <__stack+0x3b>
  d4:	8a 31       	cpi	r24, 0x1A	; 26
  d6:	94 40       	sbci	r25, 0x04	; 4
  d8:	19 f4       	brne	.+6      	; 0xe0 <__stack+0x41>
			{
				PORTB |= (1<<OUTPIN)|(1<<TESTPIN);
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	89 60       	ori	r24, 0x09	; 9
  de:	88 bb       	out	0x18, r24	; 24
			}
			if (counter == 200 || counter == 400 || counter == 900 || counter == 1100)
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	88 3c       	cpi	r24, 0xC8	; 200
  ea:	91 05       	cpc	r25, r1
  ec:	59 f0       	breq	.+22     	; 0x104 <__stack+0x65>
  ee:	80 39       	cpi	r24, 0x90	; 144
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	92 07       	cpc	r25, r18
  f4:	39 f0       	breq	.+14     	; 0x104 <__stack+0x65>
  f6:	84 38       	cpi	r24, 0x84	; 132
  f8:	23 e0       	ldi	r18, 0x03	; 3
  fa:	92 07       	cpc	r25, r18
  fc:	19 f0       	breq	.+6      	; 0x104 <__stack+0x65>
  fe:	8c 34       	cpi	r24, 0x4C	; 76
 100:	94 40       	sbci	r25, 0x04	; 4
 102:	19 f4       	brne	.+6      	; 0x10a <__stack+0x6b>
			{
				PORTB&=~((1<<OUTPIN)|(1<<TESTPIN));
 104:	88 b3       	in	r24, 0x18	; 24
 106:	86 7f       	andi	r24, 0xF6	; 246
 108:	88 bb       	out	0x18, r24	; 24
			}
			if (counter == 1100)
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 112:	8c 34       	cpi	r24, 0x4C	; 76
 114:	94 40       	sbci	r25, 0x04	; 4
 116:	31 f4       	brne	.+12     	; 0x124 <__stack+0x85>
			{
				status_blink = 0;
 118:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <status_blink>
				counter = 0;
 11c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 120:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
        }
		if (restart == 1)
 124:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <restart>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	09 f0       	breq	.+2      	; 0x12e <__stack+0x8f>
 12c:	b4 cf       	rjmp	.-152    	; 0x96 <main+0x30>
		{
			status_blink = 0;
 12e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <status_blink>
			counter = 0;
 132:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 136:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			restart = 0;
 13a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <restart>
			start_blink();
 13e:	2b d0       	rcall	.+86     	; 0x196 <start_blink>
 140:	aa cf       	rjmp	.-172    	; 0x96 <main+0x30>

Disassembly of section .text.__dummy_fini:

000001d8 <_fini>:
 1d8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001da <__funcs_on_exit>:
 1da:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001dc <__simulator_exit>:
 1dc:	08 95       	ret

Disassembly of section .text.exit:

000001c8 <exit>:
 1c8:	ec 01       	movw	r28, r24
 1ca:	07 d0       	rcall	.+14     	; 0x1da <__funcs_on_exit>
 1cc:	05 d0       	rcall	.+10     	; 0x1d8 <_fini>
 1ce:	ce 01       	movw	r24, r28
 1d0:	05 d0       	rcall	.+10     	; 0x1dc <__simulator_exit>
 1d2:	ce 01       	movw	r24, r28
 1d4:	04 d0       	rcall	.+8      	; 0x1de <_Exit>

Disassembly of section .text._Exit:

000001de <_Exit>:
 1de:	41 df       	rcall	.-382    	; 0x62 <_exit>
