
Fake_ABS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000066  0000019e  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  00000251  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003fa  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000100  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000190  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000106  00000106  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_2 0000002e  000000ca  000000ca  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000064  00000066  00000066  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.status_blink 00000001  00800060  00800060  000001e4  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  00000108  00000108  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  0000010a  0000010a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  0000010c  0000010c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    0000000e  000000f8  000000f8  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000002  0000010e  0000010e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c c0       	rjmp	.+24     	; 0x1a <__ctors_end>
   2:	81 c0       	rjmp	.+258    	; 0x106 <__bad_interrupt>
   4:	62 c0       	rjmp	.+196    	; 0xca <__vector_2>
   6:	7f c0       	rjmp	.+254    	; 0x106 <__bad_interrupt>
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	7d c0       	rjmp	.+250    	; 0x106 <__bad_interrupt>
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	7b c0       	rjmp	.+246    	; 0x106 <__bad_interrupt>
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	79 c0       	rjmp	.+242    	; 0x106 <__bad_interrupt>

00000014 <.dinit>:
  14:	00 60       	ori	r16, 0x00	; 0
  16:	00 61       	ori	r16, 0x10	; 16
  18:	80 00       	.word	0x0080	; ????

0000001a <__ctors_end>:
  1a:	11 24       	eor	r1, r1
  1c:	1f be       	out	0x3f, r1	; 63
  1e:	cf e9       	ldi	r28, 0x9F	; 159
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	e4 e1       	ldi	r30, 0x14	; 20
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	40 e0       	ldi	r20, 0x00	; 0
  28:	17 c0       	rjmp	.+46     	; 0x58 <__do_clear_bss+0x8>
  2a:	b5 91       	lpm	r27, Z+
  2c:	a5 91       	lpm	r26, Z+
  2e:	35 91       	lpm	r19, Z+
  30:	25 91       	lpm	r18, Z+
  32:	05 91       	lpm	r16, Z+
  34:	07 fd       	sbrc	r16, 7
  36:	0c c0       	rjmp	.+24     	; 0x50 <__do_clear_bss>
  38:	95 91       	lpm	r25, Z+
  3a:	85 91       	lpm	r24, Z+
  3c:	ef 01       	movw	r28, r30
  3e:	f9 2f       	mov	r31, r25
  40:	e8 2f       	mov	r30, r24
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a2 17       	cp	r26, r18
  48:	b3 07       	cpc	r27, r19
  4a:	d9 f7       	brne	.-10     	; 0x42 <__DATA_REGION_LENGTH__+0x2>
  4c:	fe 01       	movw	r30, r28
  4e:	04 c0       	rjmp	.+8      	; 0x58 <__do_clear_bss+0x8>

00000050 <__do_clear_bss>:
  50:	1d 92       	st	X+, r1
  52:	a2 17       	cp	r26, r18
  54:	b3 07       	cpc	r27, r19
  56:	e1 f7       	brne	.-8      	; 0x50 <__do_clear_bss>
  58:	e9 31       	cpi	r30, 0x19	; 25
  5a:	f4 07       	cpc	r31, r20
  5c:	31 f7       	brne	.-52     	; 0x2a <__do_copy_data+0x8>
  5e:	03 d0       	rcall	.+6      	; 0x66 <_etext>
  60:	4b c0       	rjmp	.+150    	; 0xf8 <exit>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>

Disassembly of section .text:

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_2:

000000ca <__vector_2>:
unsigned char status_blink = 0;

void blink(void);

ISR(PCINT0_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	if (!(PORTB & (1<<BTNPIN)))
  d6:	c1 99       	sbic	0x18, 1	; 24
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <__vector_2+0x18>
	{
		status_blink = 1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	05 c0       	rjmp	.+10     	; 0xec <__vector_2+0x22>
	}
	else
	{
		status_blink = 0;
  e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		PORTB&=~(1<<OUTPIN);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	88 bb       	out	0x18, r24	; 24
	}
	
}
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

Disassembly of section .text.main:

00000066 <main>:

int main(void)
{
	DDRB|=(1<<OUTPIN);
  66:	87 b3       	in	r24, 0x17	; 23
  68:	81 60       	ori	r24, 0x01	; 1
  6a:	87 bb       	out	0x17, r24	; 23
	PCMSK |= (1 << BTNPIN) | (1 << FUSEPIN);
  6c:	85 b3       	in	r24, 0x15	; 21
  6e:	82 61       	ori	r24, 0x12	; 18
  70:	85 bb       	out	0x15, r24	; 21
	GIMSK |= (1 << PCIE);
  72:	8b b7       	in	r24, 0x3b	; 59
  74:	80 62       	ori	r24, 0x20	; 32
  76:	8b bf       	out	0x3b, r24	; 59
	sei();
  78:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	2f eb       	ldi	r18, 0xBF	; 191
  7c:	84 ed       	ldi	r24, 0xD4	; 212
  7e:	91 e0       	ldi	r25, 0x01	; 1
  80:	21 50       	subi	r18, 0x01	; 1
  82:	80 40       	sbci	r24, 0x00	; 0
  84:	90 40       	sbci	r25, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x1a>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x24>
  8a:	00 00       	nop
	
	//-----------Start Blink-----------
	_delay_ms(500);
	PORTB|=(1<<OUTPIN);
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	88 bb       	out	0x18, r24	; 24
  92:	2f e3       	ldi	r18, 0x3F	; 63
  94:	8e e7       	ldi	r24, 0x7E	; 126
  96:	95 e0       	ldi	r25, 0x05	; 5
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x32>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <__stack+0x3>
  a2:	00 00       	nop
	_delay_ms(1500);
	PORTB&=~(1<<OUTPIN);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	88 bb       	out	0x18, r24	; 24
	//---------------------------------
	
    while(1)
    {
        if (status_blink == 1)
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	e1 f7       	brne	.-8      	; 0xaa <__stack+0xb>
  b2:	03 c0       	rjmp	.+6      	; 0xba <__stack+0x1b>
        {
			while(!(PORTB & (1<<BTNPIN)))
			{
				PORTB|=(1<<OUTPIN);
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	88 bb       	out	0x18, r24	; 24
	
    while(1)
    {
        if (status_blink == 1)
        {
			while(!(PORTB & (1<<BTNPIN)))
  ba:	c1 9b       	sbis	0x18, 1	; 24
  bc:	fb cf       	rjmp	.-10     	; 0xb4 <__stack+0x15>
			{
				PORTB|=(1<<OUTPIN);
			}
			PORTB&=~(1<<OUTPIN);
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	88 bb       	out	0x18, r24	; 24
			status_blink = 0;
  c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	f0 cf       	rjmp	.-32     	; 0xaa <__stack+0xb>

Disassembly of section .text.__dummy_fini:

00000108 <_fini>:
 108:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000010a <__funcs_on_exit>:
 10a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000010c <__simulator_exit>:
 10c:	08 95       	ret

Disassembly of section .text.exit:

000000f8 <exit>:
  f8:	ec 01       	movw	r28, r24
  fa:	07 d0       	rcall	.+14     	; 0x10a <__funcs_on_exit>
  fc:	05 d0       	rcall	.+10     	; 0x108 <_fini>
  fe:	ce 01       	movw	r24, r28
 100:	05 d0       	rcall	.+10     	; 0x10c <__simulator_exit>
 102:	ce 01       	movw	r24, r28
 104:	04 d0       	rcall	.+8      	; 0x10e <_Exit>

Disassembly of section .text._Exit:

0000010e <_Exit>:
 10e:	a9 df       	rcall	.-174    	; 0x62 <_exit>
